{"version":3,"sources":["components/directions.js","components/ingredient.js","components/ingredients.js","utilities/networking.js","components/app.js","serviceWorker.js","index.js"],"names":["Directions","props","directions","className","Ingredient","name","amount","Ingredients","ingredientList","ingredients","Object","keys","map","ingredient","i","key","organizeMeal","meal","reduce","acc","currentValue","ingredientName","ingredientNum","includes","slice","trim","assign","getRandomMeal","fetch","then","res","json","meals","App","state","setState","h2Text","imgDiv","directionsDiv","ingredientsDiv","this","buttonText","button","onClick","getMeal","bind","mealOrNoMeal","strMeal","src","strMealThumb","alt","strInstructions","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAceA,EAZE,SAACC,GAChB,IAAIC,EAMJ,OAJEA,EADuB,OAArBD,EAAMC,WACK,gCAEAD,EAAMC,WAGnB,yBAAKC,UAAU,cAAa,2BAAID,KCHrBE,EALE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OACvB,OACE,4BAAKD,EAAL,KAAY,0BAAMF,UAAU,UAAUG,KCa3BC,EAdG,SAACN,GACjB,IAAIO,EASJ,OAPEA,EADwB,OAAtBP,EAAMQ,YACS,8BAEEC,OAAOC,KAAKV,EAAMQ,aAAaG,KAAI,SAACC,EAAYC,GACjE,OAAO,kBAAC,EAAD,CAAYT,KAAMQ,EAAYP,OAAQL,EAAMQ,YAAYI,GAAaE,IAAKD,OAKnF,wBAAIX,UAAU,eAAeK,I,OCK7BQ,EAAe,SAACC,GAClB,IAAIN,EAAOD,OAAOC,KAAKM,GAgBvB,OAfAA,EAAON,EAAKO,QAAO,SAACC,EAAKC,GACvB,IAAIC,EACAC,EAWJ,OAVIF,EAAaG,SAAS,kBACxBD,EAAgBF,EAAaI,MAAM,IAGZ,MAFvBH,EAAiBJ,EAAKG,KAE0B,OAAnBC,IAC3BF,EAAIV,YAAYY,GAAkBJ,EAAK,aAAeK,GAAeG,SAE7DL,EAAaG,SAAS,eAChCb,OAAOgB,OAAOP,EAAdT,OAAA,IAAAA,CAAA,GAAqBU,EAAeH,EAAKG,KAEpCD,IACN,CAACV,YAAa,MAIJkB,EArCK,WAClB,OAAOC,MAHF,sDAIJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,OAAOd,EAAac,EAAIE,MAAM,QCoEnBC,G,wBAlEb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDiC,MAAQ,CACXjB,KAAM,MAHS,E,uEAOR,IAAD,OACRU,IACGE,MAAK,SAACZ,GACL,EAAKkB,UAAS,SAACD,GACb,MAAO,CAAEjB,KAAMA,W,+BAiBrB,IAGImB,EACAC,EACAC,EACAC,EANAtB,EAAOuB,KAAKN,MAAMjB,KAClBwB,EAAa,aACbC,EAAS,4BAAQC,QAASH,KAAKI,QAAQC,KAAKL,OAAQC,GAKpDK,EAAe,UAgBnB,OAba,OAAT7B,IAGF6B,EAAe,OACfL,EAAa,iBACbL,EAASnB,EAAK8B,QACdV,EACE,yBAAKlC,UAAU,eACb,yBAAK6C,IAAK/B,EAAKgC,aAAcC,IAAG,YAAOjC,EAAKgC,iBAEhDX,EAAgB,kBAAC,EAAD,CAAYpC,WAAYe,EAAKkC,kBAC7CZ,EAAiB,kBAAC,EAAD,CAAa9B,YAAaQ,EAAKR,eAGhD,yBAAKN,UAAS,oBAAe2C,IAC3B,gCACE,kDACA,4BAAKV,IAENC,EACAC,EACAC,EACAG,O,GA7DSU,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.9c59b8e6.chunk.js","sourcesContent":["import React from 'react';\n\nlet Directions = (props) => {\n  let directions;\n  if (props.directions === null) {\n    directions = 'the directions would go here!';\n  } else {\n    directions = props.directions;\n  }\n  return (\n    <div className=\"directions\"><p>{directions}</p></div>\n  );\n}\n\nexport default Directions;","import React from 'react';\n\nlet Ingredient = ({name, amount}) => {\n  return (\n    <li>{name}, <span className=\"amount\">{amount}</span></li>\n  );\n}\nexport default Ingredient","import React from 'react';\nimport Ingredient from './ingredient.js';\n\nlet Ingredients = (props) => {\n  let ingredientList;\n  if (props.ingredients === null) {\n    ingredientList = <div></div>;\n  } else {\n      ingredientList = Object.keys(props.ingredients).map((ingredient, i) => {\n      return <Ingredient name={ingredient} amount={props.ingredients[ingredient]} key={i}></Ingredient>\n    });\n  }\n\n  return (\n    <ul className=\"ingredients\">{ingredientList}</ul>\n  );\n}\nexport default Ingredients;","let url = `https://www.themealdb.com/api/json/v1/1/random.php`;\n\nlet getRandomMeal = () => {\n  return fetch(url)\n  .then((res) => res.json())\n  .then((res) => {\n    return organizeMeal(res.meals[0]);\n  });\n}\n\n// let getRandomMeal = (callback) => {\n//   let meal = fetch(url)\n//   .then((res) => res.json())\n//   .then((res) => {\n//     meal = res.meals[0];\n//     callback(meal);\n//   });\n// }\n\nlet organizeMeal = (meal) => {\n  let keys = Object.keys(meal);\n  meal = keys.reduce((acc, currentValue) => {\n    let ingredientName;\n    let ingredientNum;\n    if (currentValue.includes('strIngredient')) {\n      ingredientNum = currentValue.slice(13);\n      ingredientName = meal[currentValue];\n\n      if (ingredientName !== '' && ingredientName !== null) {\n        acc.ingredients[ingredientName] = meal['strMeasure' + ingredientNum].trim();\n      }\n    } else if (!currentValue.includes('strMeasure')) {\n      Object.assign(acc, {[currentValue]: meal[currentValue]})\n    }\n    return acc;\n  }, {ingredients: {}});\n  return meal;\n}\n\nexport default getRandomMeal;","import React from 'react';\nimport Directions from './directions.js';\nimport Ingredients from './ingredients.js';\nimport getRandomMeal from '../utilities/networking.js';\nimport './ingredients.css';\nimport './app.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meal: null\n    }\n  }\n\n  getMeal() {\n    getRandomMeal()\n      .then((meal) => {\n        this.setState((state) => {\n          return { meal: meal }\n        });\n      });\n  }\n\n  // comments on using one style of getMeal (along with getRandomMeal in networking.js) over the other?\n  // getMeal() {\n  //   let callback = function(meal) {\n  //     this.setState((state) => {\n  //       return { meal: meal }\n  //     });\n  //   }\n\n  //   getRandomMeal(callback.bind(this));\n  // }\n\n  render() {\n    let meal = this.state.meal;\n    let buttonText = 'Get a Meal';\n    let button = <button onClick={this.getMeal.bind(this)}>{buttonText}</button>;\n    let h2Text;\n    let imgDiv;\n    let directionsDiv;\n    let ingredientsDiv;\n    let mealOrNoMeal = 'no-meal';\n\n\n    if (meal === null) {\n\n    } else {\n      mealOrNoMeal = 'meal';\n      buttonText = 'Get a New Meal';\n      h2Text = meal.strMeal;\n      imgDiv =\n        <div className=\"img-wrapper\">\n          <img src={meal.strMealThumb} alt={`a ${meal.strMealThumb}`}></img>\n        </div>;\n      directionsDiv = <Directions directions={meal.strInstructions}></Directions>;\n      ingredientsDiv = <Ingredients ingredients={meal.ingredients}></Ingredients>;\n    }\n    return (\n      <div className={`container ${mealOrNoMeal}`}>\n        <header>\n          <h1>What Should I Eat?</h1>\n          <h2>{h2Text}</h2>\n        </header>\n        {imgDiv}\n        {directionsDiv}\n        {ingredientsDiv}\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}